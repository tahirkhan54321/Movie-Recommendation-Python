# A class for updating the database with CSV data (should the CSV change)
# note that only new CSV ids are added, no need to delete existing data
# management -> commands are for registering actions
# https://docs.djangoproject.com/en/5.0/howto/custom-management-commands/
# update to be run by command line

import csv
import json
from django.core.management.base import BaseCommand
from base.models import Movie
from django.core.exceptions import ValidationError
from django.db import IntegrityError
import pandas as pd

class Command(BaseCommand): # must define a class Command that extends BaseCommand or one of its subclasses.
    help = 'Updates movie data from a CSV file containing JSON data'

    # django boilerplate to get csv in
    def add_arguments(self, parser):
        parser.add_argument('base\datafiles\tmdb_5000_credits.csv', type=str, help='Path to CSV file')

    # logic for pulling in data - save in pandas dataframe then push this to database
    def write_movies(self, *args, **options):
        # define filepath, bring in data and save to a pandas dataframe
        file_path = options['base\datafiles\tmdb_5000_credits.csv']
        dataframe = pd.read_csv(file_path)

        # loop over all rows in the dataframe
        for _, row in dataframe.iterrows():

            # process first movie id column, validate, check if not already in database, 
            # skip if it is, and add movie id to pandas dataframe
            movie_id = row['movie_id']
            if (
                Movie.objects.filter(id=movie_id).exists()
                or not movie_id
                or not movie_id.is_integer()
                or movie_id is None
            ):
                continue

            # process second column, validate, and add movie title
            movie_title = str(row['title'])
            if movie_title is None:
                continue

            # process third column, extract the first 5 actor and character fields
            # TBC - put this in its own function
            try:
                cast_order_to_extract = [0, 1, 2, 3, 4]
                json_cast_string = row['cast']
                cast_data = json.loads(json_cast_string)
                cast_dataframe = pd.DataFrame(cast_data)
                filtered_dataframe = cast_dataframe[cast_dataframe['order'].isin(cast_order_to_extract)]
                list_of_actors = filtered_dataframe['name'].tolist()
                list_of_characters = filtered_dataframe['character'].tolist()
            except json.JSONDecodeError:
                print('JSON decode error in cast data')
                continue

            # process fourth column, extract the credit fields
            try:
                json_crew_string = row['crew']
                crew_data = json.loads(json_crew_string)
                for crew_member in crew_data:
                    if crew_member['job'] == 'Director':
                        director = crew_member['name']
                    if crew_member['job'] == 'Writer':
                        writer = crew_member['name']
                    if crew_member['job'] == 'Composer':
                        composer = crew_member['name']
            except json.JSONDecodeError:
                print('JSON decode error in crew data')
                continue

            # write the dataframe to the database
            try:
                Movie.objects.create(
                    movie_id = movie_id,
                    title = movie_title,
                    actor0 = list_of_actors[0],
                    actor1 = list_of_actors[1],
                    actor2 = list_of_actors[2],
                    actor3 = list_of_actors[3],
                    actor4 = list_of_actors[4],
                    character0 = list_of_characters[0],
                    character1 = list_of_characters[1],
                    character2 = list_of_characters[2],
                    character3 = list_of_characters[3],
                    character4 = list_of_characters[4],
                    director = director,
                    writer = writer,
                    composer = composer,
                )
            except IntegrityError:
                self.stdout.write(self.style.ERROR("Integrity error for {movie_title}"))